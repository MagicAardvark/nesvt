[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/reportWebVitals.js":"3","/app/src/components/Header.js":"4","/app/src/util.js":"5","/app/src/components/DriverClass.js":"6","/app/src/components/DriverClasses.js":"7","/app/src/components/Driver.js":"8","/app/src/components/Runs.js":"9"},{"size":722,"mtime":1624653002123,"results":"10","hashOfConfig":"11"},{"size":967,"mtime":1624663394522,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1624622197462,"results":"13","hashOfConfig":"11"},{"size":2383,"mtime":1624650221283,"results":"14","hashOfConfig":"11"},{"size":6159,"mtime":1624656481534,"results":"15","hashOfConfig":"11"},{"size":1534,"mtime":1624663268720,"results":"16","hashOfConfig":"11"},{"size":314,"mtime":1624658872923,"results":"17","hashOfConfig":"11"},{"size":3279,"mtime":1624663840544,"results":"18","hashOfConfig":"11"},{"size":424,"mtime":1624663816112,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"19spffb",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/index.js",["43"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Header from './components/Header'\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Header />\n//   </React.StrictMode>,\n//   document.getElementById('header')\n// );\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/app/src/App.js",["44"],"import './App.css';\n\nimport { useEffect, useState } from 'react'\n\nimport Header from './components/Header'\nimport DriverClasses from './components/DriverClasses';\nimport { initDoc, parseResults, parseTable } from './util.js';\n\nfunction App() {\n    const [results, setResults] = useState({ })\n\n    useEffect(() => {\n        const getData = async() => {\n            const data = await fetchData()\n            setResults(data)\n        }\n        getData();\n    }, results)\n\n    const fetchData = async() => {\n      const res = await fetch('results_sample.html');\n      const data = await res.text();\n      var doc = initDoc(data)\n      const table = doc.querySelectorAll(\"table\")[3]\n      const results = parseResults(parseTable(table));\n      console.log(results)\n      return results;\n    }\n\n    return (\n      <>\n        <Header />\n        {results.hasOwnProperty(\"class\") ? <DriverClasses results={results} /> : 'No classes' }\n      </>\n    );\n}\n\nexport default App;\n","/app/src/reportWebVitals.js",[],["45","46"],"/app/src/components/Header.js",["47","48","49","50","51","52","53"],"const Header = () => {\n\n    return (\n        <nav class=\"navbar fixed-top navbar-expand-lg navbar-dark\" id=\"mainNavBar\">\n            <div class=\"container-fluid\">\n                <a class=\"navbar-brand\" href=\"\">RESULTS</a>\n                <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\"\n                    data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Dark Mode?</a>\n                        </li>\n                        <li class=\"nav-item dropdown\">\n                            <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\"\n                                data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                                Class\n                            </a>\n                            <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\" id=\"navbarClassSelector\">\n                                <li><a class=\"dropdown-item\" href=\"#\">ES</a></li>\n                                <li><a class=\"dropdown-item\" href=\"#\">ER (Hardcoded)</a></li>\n                                <li>\n                                    <hr class=\"dropdown-divider\" />\n                                </li>\n                                <li><a class=\"dropdown-item\" href=\"#\">Show All</a></li>\n                            </ul>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Remove Cones</a>\n                        </li>\n                    </ul>\n                    <form class=\"d-flex\">\n                        <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search for Driver\" aria-label=\"Search\"></input>\n                        <button class=\"btn btn-light\" type=\"submit\">Go</button>\n                    </form>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header\n","/app/src/util.js",[],"/app/src/components/DriverClass.js",["54"],"import { useState } from 'react'\nimport { Collapse, Button } from 'react-bootstrap'\n\nimport Driver from \"./Driver\"\n\nconst DriverClass = ({driverClass, drivers}) => {\n\n    // const [isOpen, setIsOpen] = useState(false);\n    \n    // const toggle = () => setIsOpen(!isOpen);\n\n    const getDriversInClass = (classAlias, drivers) => {\n        return drivers.filter(function(driver){\n            return driver.class === classAlias;\n        })\n    }\n\n    const [open, setOpen] = useState(false);\n\n    return (\n        <div class=\"container pt-4\">\n            <div class=\"row\">\n                <div class=\"col-sm-8\">\n                    <Button variant=\"\" onClick={() => setOpen(!open)} aria-expanded={open}><h3>{driverClass.name} - {driverClass.alias}</h3> </Button>\n                </div>\n                \n                <div class=\"col-sm-4 text-muted align-self-center\">\n                    <h4>{driverClass.count} Drivers</h4>\n                </div>\n\n                <Collapse in={open}>\n                    <div>\n                        {getDriversInClass(driverClass.alias, drivers).map((driver) => (\n                            <Driver driver={driver} />\n                        ))}\n                    </div>\n                </Collapse> \n            </div>\n        </div>\n    )\n}\n\nexport default DriverClass\n\n{/* <button class=\"btn\" type=\"button\" \ndata-bs-toggle=\"collapse\" \ndata-bs-target=\"#classList1\"\n    aria-expanded=\"true\" aria-controls=\"collapseClassList1\">\n    <h3>{driverClass.name} - {driverClass.alias}</h3>\n</button> */}","/app/src/components/DriverClasses.js",[],"/app/src/components/Driver.js",[],"/app/src/components/Runs.js",[],{"ruleId":"55","severity":1,"message":"56","line":5,"column":8,"nodeType":"57","messageId":"58","endLine":5,"endColumn":14},{"ruleId":"59","severity":1,"message":"60","line":18,"column":8,"nodeType":"57","endLine":18,"endColumn":15},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":6,"column":17,"nodeType":"67","endLine":6,"endColumn":49},{"ruleId":"65","severity":1,"message":"66","line":15,"column":29,"nodeType":"67","endLine":15,"endColumn":85},{"ruleId":"65","severity":1,"message":"66","line":18,"column":29,"nodeType":"67","endLine":19,"endColumn":81},{"ruleId":"65","severity":1,"message":"66","line":23,"column":37,"nodeType":"67","endLine":23,"endColumn":71},{"ruleId":"65","severity":1,"message":"66","line":24,"column":37,"nodeType":"67","endLine":24,"endColumn":71},{"ruleId":"65","severity":1,"message":"66","line":28,"column":37,"nodeType":"67","endLine":28,"endColumn":71},{"ruleId":"65","severity":1,"message":"66","line":32,"column":29,"nodeType":"67","endLine":32,"endColumn":102},{"ruleId":"68","severity":1,"message":"69","line":45,"column":1,"nodeType":"70","messageId":"71","endLine":50,"endColumn":14},"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation"]